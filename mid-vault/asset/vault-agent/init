#!/bin/bash

logInfo () {
  msg="[VAULT AGENT - init script] $(date '+%Y-%m-%dT%T.%3N') ${1}"
  echo "$msg" | tee -a ${LOG_FILE}
}

validateEnvVariables(){
  logInfo "Validating env variables"
  validateEnvVariables="true"
  message="List of env variables not set: "
  if [ "${VAULT_AGENT_EXIT_AFTER_AUTH}" == "" ] ; then
    validateEnvVariables='false' ;
    message="${message} VAULT_AGENT_EXIT_AFTER_AUTH" ;
  fi
  if [ "${VAULT_AGENT_ROLE_ID_FILE}" == "" ]  ; then
    validateEnvVariables='false' ;
    message="${message} VAULT_AGENT_ROLE_ID_FILE" ;
  fi
  if [ "${VAULT_AGENT_SECRET_ID_FILE}" == "" ]  ; then
    validateEnvVariables='false' ;
    message="${message} VAULT_AGENT_SECRET_ID_FILE" ;
  fi
  if [ "${VAULT_AGENT_REMOVE_AFTER_AUTH}" == "" ]  ; then
    validateEnvVariables='false' ;
    message="${message} VAULT_AGENT_REMOVE_AFTER_AUTH" ;
  fi
  if [ "${VAULT_AGENT_SERVER_ADDR}" == "" ]  ; then
    validateEnvVariables='false' ;
    message="${message} VAULT_AGENT_SERVER_ADDR" ;
  fi
  if [ "${VAULT_AGENT_TEMPLATE_FILE}" == "" ]  ; then
    validateEnvVariables='false' ; 
    message="${message} VAULT_AGENT_TEMPLATE_FILE" ;
  fi
  if [ "${VAULT_AGENT_TARGET_FILE}" == "" ]  ; then
    validateEnvVariables='false' ;
    message="${message} VAULT_AGENT_TARGET_FILE" ;
  fi
  logInfo "Validation result: ${validateEnvVariables}"
  if [ "${validateEnvVariables}" == "true" ]; then
    logInfo "All env variables are set" ;
  else
    logInfo "[ERROR] Following env variables are not set: ${message}. VAULT AGENT NOT STARTED!!!" && exit 1 ;
  fi
}

fillConfigFile(){
  logInfo "Filling config file"

  logInfo "Setting EXIT_AFTER_AUTH"
  if [[ -z "${VAULT_AGENT_EXIT_AFTER_AUTH}" ]]; then
      logInfo "VAULT_AGENT_EXIT_AFTER_AUTH is not set. Setting to true"
      VAULT_AGENT_EXIT_AFTER_AUTH="true"
  else
      logInfo "VAULT_AGENT_EXIT_AFTER_AUTH is set to ${VAULT_AGENT_EXIT_AFTER_AUTH}"
  fi

  logInfo "Setting VAULT_AGENT_EXIT_AFTER_AUTH = '${VAULT_AGENT_EXIT_AFTER_AUTH}' in /vault-agent/agent.hcl"
  sed -i "s~VAULT_AGENT_EXIT_AFTER_AUTH~${VAULT_AGENT_EXIT_AFTER_AUTH}~g" /vault-agent/agent.hcl

  logInfo "Setting VAULT_AGENT_ROLE_ID_FILE = '${VAULT_AGENT_ROLE_ID_FILE}' in /vault-agent/agent.hcl"
  sed -i "s~VAULT_AGENT_ROLE_ID_FILE~${VAULT_AGENT_ROLE_ID_FILE}~g" /vault-agent/agent.hcl

  logInfo "Setting VAULT_AGENT_SECRET_ID_FILE = '${VAULT_AGENT_SECRET_ID_FILE}' in /vault-agent/agent.hcl"
  sed -i "s~VAULT_AGENT_SECRET_ID_FILE~${VAULT_AGENT_SECRET_ID_FILE}~g" /vault-agent/agent.hcl

  logInfo "Setting VAULT_AGENT_REMOVE_AFTER_AUTH = '${VAULT_AGENT_REMOVE_AFTER_AUTH}' in /vault-agent/agent.hcl"
  sed -i "s~VAULT_AGENT_REMOVE_AFTER_AUTH~${VAULT_AGENT_REMOVE_AFTER_AUTH}~g" /vault-agent/agent.hcl

  logInfo "Setting VAULT_AGENT_SERVER_ADDR = '${VAULT_AGENT_SERVER_ADDR}' in /vault-agent/agent.hcl"
  sed -i "s~VAULT_AGENT_SERVER_ADDR~${VAULT_AGENT_SERVER_ADDR}~g" /vault-agent/agent.hcl

  # logInfo "Setting VAULT_AGENT_TEMPLATE_FILE = '${VAULT_AGENT_TEMPLATE_FILE}' in /vault-agent/agent.hcl"
  # #sed -i "s~VAULT_AGENT_TEMPLATE_FILE~${VAULT_AGENT_TEMPLATE_FILE}~g" /vault-agent/agent.hcl

  # logInfo "Setting VAULT_AGENT_TARGET_FILE = '${VAULT_AGENT_TARGET_FILE}' in /vault-agent/agent.hcl"
  # sed -i "s~VAULT_AGENT_TARGET_FILE~${VAULT_AGENT_TARGET_FILE}~g" /vault-agent/agent.hcl

}

decodingTemplate(){
  logInfo "Decoding VAULT_AGENT_TEMPLATE and writing to /vault-agent/${VAULT_AGENT_TEMPLATE_FILE}"
  echo ${VAULT_AGENT_TEMPLATE_FILE} | base64 -d > ${VAULT_AGENT_TEMPLATE_FILE}
}

startValtAgent(){
  logInfo "Checking if app role is generated"
  # check if role_id and secret_id are generated by vault server. If not, wait for 60 seconds
  MAX_INIT_WAIT_TIME=60
  INIT_WAIT_TIME=0
  while [ ! -f /vault-agent/role/role_id.txt ] || [ ! -f /vault-agent/role/secret_id.txt ] && [ ${INIT_WAIT_TIME} -lt ${MAX_INIT_WAIT_TIME} ]; do
    logInfo "Waiting for role_id and secret_id to be generated. Sleeping for 5 seconds"
    sleep 5
    INIT_WAIT_TIME=$((INIT_WAIT_TIME+5))
  done
  if [ ${INIT_WAIT_TIME} -ge ${MAX_INIT_WAIT_TIME} ]; then
    logInfo "Role_id and secret_id are not generated. Exiting ..."
    exit 1
  fi

  logInfo "Role_id and secret_id are generated \o/ \o/ \o/. Starting vault agent using /vault-agent/agent.hcl"
  vault agent -config /vault-agent/agent.hcl -log-level=trace
}

logInfo "Starting vault-entrypoint.sh"
validateEnvVariables
fillConfigFile
# decodingTemplate
startValtAgent